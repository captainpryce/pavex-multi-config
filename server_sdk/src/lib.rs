//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: pavex_matchit::Router<u32>,
    application_state: ApplicationState,
}
pub struct ApplicationState {
    s0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
}
pub async fn build_application_state(
    v0: app::routes::integrations::big_data_api::bigdata_configuration::BigDataConfig,
) -> crate::ApplicationState {
    let v1 = app::routes::integrations::big_data_api::bigdata_client::BigDataClient::new(
        v0,
    );
    crate::ApplicationState { s0: v1 }
}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    let server_state = std::sync::Arc::new(ServerState {
        router: build_router(),
        application_state,
    });
    server_builder.serve(route_request, server_state)
}
fn build_router() -> pavex_matchit::Router<u32> {
    let mut router = pavex_matchit::Router::new();
    router.insert("/api/ping", 0u32).unwrap();
    router.insert("/big_data_api/product_info/:upc", 1u32).unwrap();
    router
}
async fn route_request(
    request: http::Request<hyper::body::Incoming>,
    _connection_info: Option<pavex::connection::ConnectionInfo>,
    server_state: std::sync::Arc<ServerState>,
) -> pavex::response::Response {
    let (request_head, request_body) = request.into_parts();
    #[allow(unused)]
    let request_body = pavex::request::body::RawIncomingBody::from(request_body);
    let request_head: pavex::request::RequestHead = request_head.into();
    let matched_route = match server_state.router.at(&request_head.target.path()) {
        Ok(m) => m,
        Err(_) => {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "*",
            );
            return route_1::entrypoint(
                    &request_head,
                    matched_route_template,
                    &allowed_methods,
                )
                .await;
        }
    };
    let route_id = matched_route.value;
    #[allow(unused)]
    let url_params: pavex::request::path::RawPathParams<'_, '_> = matched_route
        .params
        .into();
    match route_id {
        0u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/api/ping",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_0::entrypoint(matched_route_template, &request_head).await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                        ])
                        .into();
                    route_1::entrypoint(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        1u32 => {
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "/big_data_api/product_info/:upc",
            );
            match &request_head.method {
                &pavex::http::Method::GET => {
                    route_2::entrypoint(
                            server_state.application_state.s0.clone(),
                            url_params,
                            matched_route_template,
                            &request_head,
                        )
                        .await
                }
                _ => {
                    let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                            pavex::http::Method::GET,
                        ])
                        .into();
                    route_1::entrypoint(
                            &request_head,
                            matched_route_template,
                            &allowed_methods,
                        )
                        .await
                }
            }
        }
        i => unreachable!("Unknown route id: {}", i),
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1).await;
        response
    }
    async fn stage_1<'a>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0, s_1).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a pavex_tracing::RootSpan) -> pavex::response::Response {
        let response = wrapping_2(s_0).await;
        response
    }
    async fn stage_3() -> pavex::response::Response {
        let response = handler().await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = crate::route_0::Next0 {
            s_0: v0,
            s_1: v1,
            next: stage_1,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = pavex::middleware::wrap_noop(v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn wrapping_1(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v2 = pavex::telemetry::ServerRequestId::generate();
        let v3 = app::telemetry::root_span(v1, v0, v2);
        let v4 = crate::route_0::Next1 {
            s_0: &v3,
            next: stage_2,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v3);
        let v7 = pavex_tracing::logger(v6, v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    async fn wrapping_2(v0: &pavex_tracing::RootSpan) -> pavex::response::Response {
        let v1 = crate::route_0::Next2 {
            next: stage_3,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = app::telemetry::response_logger(v2, v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn handler() -> pavex::response::Response {
        let v0 = app::routes::status::ping();
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
        next: fn(
            pavex::request::path::MatchedPathPattern,
            &'a pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        next: fn(&'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
    struct Next2<T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        next: fn() -> T,
    }
    impl<T> std::future::IntoFuture for Next2<T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)()
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a, 'b>(
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: &'a pavex::router::AllowedMethods,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_2, s_1, s_0).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a pavex::router::AllowedMethods,
        s_1: &'b pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let response = wrapping_2(s_0, s_1).await;
        response
    }
    async fn stage_3<'a>(
        s_0: &'a pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = handler(s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v3 = crate::route_1::Next0 {
            s_0: v2,
            s_1: v1,
            s_2: v0,
            next: stage_1,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = pavex::middleware::wrap_noop(v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn wrapping_1(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v0, v1, v3);
        let v5 = crate::route_1::Next1 {
            s_0: v2,
            s_1: &v4,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v4);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn wrapping_2(
        v0: &pavex::router::AllowedMethods,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = crate::route_1::Next2 {
            s_0: v0,
            next: stage_3,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = app::telemetry::response_logger(v3, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b pavex::request::RequestHead,
        next: fn(
            &'a pavex::router::AllowedMethods,
            pavex::request::path::MatchedPathPattern,
            &'b pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        s_1: &'b pavex_tracing::RootSpan,
        next: fn(&'a pavex::router::AllowedMethods, &'b pavex_tracing::RootSpan) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    struct Next2<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex::router::AllowedMethods,
        next: fn(&'a pavex::router::AllowedMethods) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next2<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_2 {
    pub async fn entrypoint<'a, 'b, 'c>(
        s_0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c>(
        s_0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let response = wrapping_2(s_0, s_1, s_2).await;
        response
    }
    async fn stage_3<'a, 'b, 'c>(
        s_0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1, s_2).await;
        response
    }
    async fn wrapping_0(
        v0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = crate::route_2::Next0 {
            s_0: v0,
            s_1: v1,
            s_2: v2,
            s_3: v3,
            next: stage_1,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = pavex::middleware::wrap_noop(v5).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn wrapping_1(
        v0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v3, v2, v4);
        let v6 = crate::route_2::Next1 {
            s_0: v0,
            s_1: v1,
            s_2: &v5,
            next: stage_2,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v5);
        let v9 = pavex_tracing::logger(v8, v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v9)
    }
    async fn wrapping_2(
        v0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = crate::route_2::Next2 {
            s_0: v0,
            s_1: v1,
            s_2: v2,
            next: stage_3,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = app::telemetry::response_logger(v4, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        v1: pavex::request::path::RawPathParams<'_, '_>,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v3 = pavex::request::path::PathParams::extract(v1);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v4,
                    );
                    let v6 = pavex::Error::new(v4);
                    app::telemetry::error_logger(&v6, v2).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        let v5 = app::routes::integrations::big_data_api::bigdata::get_product_data(
                v4,
                v0,
            )
            .await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c pavex::request::RequestHead,
        next: fn(
            app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
            pavex::request::path::RawPathParams<'a, 'b>,
            pavex::request::path::MatchedPathPattern,
            &'c pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c pavex_tracing::RootSpan,
        next: fn(
            app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next2<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c pavex_tracing::RootSpan,
        next: fn(
            app::routes::integrations::big_data_api::bigdata_client::BigDataClient,
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c pavex_tracing::RootSpan,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next2<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
